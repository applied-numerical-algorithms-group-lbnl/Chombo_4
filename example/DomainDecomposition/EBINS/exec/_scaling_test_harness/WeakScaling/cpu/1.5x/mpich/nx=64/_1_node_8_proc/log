max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
creating implicit function
all regular geometry
creating geometry service
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
creating implicit function
all regular geometry
creating geometry service
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
max_step        = 10
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
creating implicit function
all regular geometry
creating geometry service
creating implicit function
all regular geometry
creating geometry service
creating implicit function
all regular geometry
creating geometry service
max_step        = 10
creating implicit function
all regular geometry
creating implicit function
all regular geometry
creating geometry service
creating geometry service
max_time        = 10
checkpoint interval = -1
plotfile   interval = -1
defining geometry
nx       = 128
defining geometry
maxGrid  = 64
creating grid hierarchy
creating implicit function
all regular geometry
creating geometry service
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
initializing solver 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
EBINS::defineInternals defining parabolic solvers
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
EBINS::defineInternals defining Helmoltz solver for velocity
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
max_step        = 10
max_time        = 10
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
viscosity       = 0.01
==============================================
initializing solver 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
done with creating geometry service
making dictionary
EBINS::defineInternals defining parabolic solvers
inititializing data
using backward Euler for parabolic solver
==============================================
tolerance       = 1e-12
maxIter         = 27
blob cen        = 0.3
geom cen        = 0
max vel mag     = 1
max vel rad     = 0.25
EBINS::defineInternals defining Helmoltz solver for velocity
max_step        = 10
max_time        = 10
viscosity       = 0.01
==============================================
initializing solver 
EBINS::defineInternals defining parabolic solvers
EBINS::defineInternals defining Helmoltz solver for velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining Helmoltz solver for species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining EBBackwrdEuler solver for velo
EBINS::defineInternals defining EBBackwrdEuler solver for spec
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
EBAdvection::constructor leaving
EBINS::defineInternals defining projection operators
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
EBINS::defineInternals defining advection operator
EBAdvection::fillkappa : about to exchange
EBAdvection::fillkappa : done with
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
EBAdvection::constructor leaving
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
after EBINS constructor
going into initialize data 
zero velocity in the interior (potential flow ic)
calling initializespot for scalar 
just making all the species spots
Standard Treb pressure initializtion:
initializing pressure with (I-P)(v*).
(gphi out of initial projection).    
startiing run
inside run
projecting initial velocity
We are starting from scratch so we are projecting the initial velocity.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (0@(0 ,0 ,0 ),0@(0 ,0 ,0 ),0@(0 ,0 ,0 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 128@(0 ,0 ,0 )
EBMultigrid::solve tol = 1e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.280e+02@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.945e+00@ (0 ,0 ,0 ), rate = 1.431e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.628e-01@ (0 ,127,127), rate = 2.466e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.364e-02@ (0 ,0 ,0 ), rate = 2.659e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.869e-04@ (0 ,0 ,0 ), rate = 2.802e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.682e-05@ (0 ,0 ,0 ), rate = 2.895e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.638e-07@ (0 ,0 ,0 ), rate = 2.983e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.835e-08@ (0 ,127,127), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 6.421e-10@ (0 ,127,0 ), rate = 2.858e+01
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
mac projecting advection velocity
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 4.547e-11@ (21,63,2 )
EBCCProjector::project: |phi|max  = 9.961e-01@(0 ,103,125)
Using the ***average of MAC gradients*** for the CC gradient.
mac projecting advection velocity
mac projecting advection velocity
EBLevelCCProjector::project:|gph|max = (1.000e+00@(27,43,46),9.237e-14@(23,49,102),9.237e-14@(16,85,3 )EBLevelCCProjector::project:|gph|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
maxvel = 1.000e+00, dx = 7.812e-03, dt = 3.906e-03
We are starting from scratch so we are  initializing  pressure.
Since there is no Stokes flow initialization and the number of pressure iterations == 0, 
we are using the initial projection's pressure gradient as the initial  pressure.
step = 0, time = 0.000e+00 dt = 3.906e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.638e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.851e+00@ (0 ,0 ,0 ), rate = 3.377e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.402e-01@ (0 ,127,127), rate = 3.461e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 4.461e-03@ (0 ,127,127), rate = 3.143e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.482e-04@ (0 ,0 ,0 ), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 5.034e-06@ (0 ,0 ,0 ), rate = 2.944e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.730e-07@ (0 ,127,127), rate = 2.909e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.991e-09@ (0 ,127,127), rate = 2.889e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
calling heat solver for variable 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 2.082e-10@ (0 ,0 ,0 ), rate = 2.878e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
calling heat solver for variable 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
calling heat solver for variable 0
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.304e-12@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.571e+00@ (2 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.831e-04@ (0 ,1 ,125), rate = 5.322e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.763e-07@ (4 ,122,122), rate = 1.014e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 9.471e-10@ (4 ,6 ,6 ), rate = 5.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.177e-12@ (3 ,120,121)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,126)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,124,118), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,5 ,13), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,6 ,111), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,7 ,108), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,120,105)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.877e-02@ (1 ,126,1 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.732e-05@ (2 ,118,124), rate = 1.242e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.584e-08@ (2 ,114,122), rate = 6.239e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.701e-10@ (3 ,16,121), rate = 4.459e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.222e-13@ (3 ,108,7 ), rate = 4.029e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.100e-15@ (3 ,24,7 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
EBCCProjector::project: |input velo|max = (1.001e+00@(12,120,120),3.027e-02@(0 ,1 ,3 ),3.027e-02@(0 ,124,126)EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
EBCCProjector::project: |kappa DiVU|max  = 7.908e+01@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 7.908e+01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.360e+00@ (0 ,0 ,0 ), rate = 2.353e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.050e-01@ (0 ,0 ,0 ), rate = 3.200e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.489e-03@ (0 ,0 ,0 ), rate = 3.009e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.192e-04@ (0 ,127,127), rate = 2.927e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.130e-06@ (0 ,127,127), rate = 2.886e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.441e-07@ (0 ,0 ,0 ), rate = 2.865e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 5.050e-09@ (0 ,127,127), rate = 2.854e+01
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
mac projecting advection velocity
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.774e-10@ (0 ,127,127), rate = 2.847e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.366e-12@ (0 ,0 ,0 )
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
EBCCProjector::project: |phi|max  = 3.856e-02@(0 ,127,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
mac projecting advection velocity
EBLevelCCProjector::project:|gph|max = (4.042e-01@(0 ,127,0 ),1.725e-01@(0 ,127,64),1.725e-01@(0 ,63,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.096e+00, dx = 7.812e-03, dt = 3.564e-03
step = 1, time = 3.906e-03 dt = 3.564e-03
advancing velocity and pressure fields 
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.566e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.986e+00@ (0 ,0 ,0 ), rate = 3.929e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.072e-01@ (0 ,127,127), rate = 3.717e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.267e-03@ (0 ,0 ,0 ), rate = 3.282e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.055e-04@ (0 ,127,127), rate = 3.097e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.510e-06@ (0 ,0 ,0 ), rate = 3.005e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
calling heat solver for variable 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
calling heat solver for variable 0
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.188e-07@ (0 ,127,127), rate = 2.955e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.062e-09@ (0 ,127,127), rate = 2.924e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.400e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+00@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.461e-04@ (8 ,8 ,8 ), rate = 4.750e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 4.974e-07@ (11,10,117), rate = 4.948e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.112e-09@ (13,12,115), rate = 4.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.593e-12@ (15,13,114), rate = 4.288e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-15@ (20,15,15)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,122,64), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,120,64), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,8 ,64), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,9 ,64), rate = 4.488e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.592e-15@ (3 ,10,41)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.479e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.371e-04@ (2 ,64,122), rate = 4.388e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.092e-07@ (2 ,63,7 ), rate = 5.534e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.277e-09@ (2 ,64,8 ), rate = 4.769e+02
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.847e-12@ (3 ,62,9 ), rate = 4.488e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.564e-15@ (3 ,41,10)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
EBCCProjector::project: |input velo|max = (1.071e+00@(5 ,122,5 ),1.498e-01@(0 ,125,60),1.498e-01@(0 ,60,125)EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.169e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.169e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.085e+00@ (0 ,0 ,0 ), rate = 2.862e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.174e-01@ (0 ,0 ,0 ), rate = 3.478e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.711e-03@ (0 ,0 ,0 ), rate = 3.164e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.225e-04@ (0 ,127,127), rate = 3.030e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 4.135e-06@ (0 ,0 ,0 ), rate = 2.962e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.414e-07@ (0 ,127,127), rate = 2.924e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.875e-09@ (0 ,127,127), rate = 2.901e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
advancing species advection/diffusion
getting reaction rates and evolving species
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.689e-10@ (0 ,0 ,0 ), rate = 2.887e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.168e-12@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 2.999e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
EBLevelCCProjector::project:|gph|max = (5.547e-01@(0 ,0 ,127),2.138e-01@(0 ,0 ,123),2.138e-01@(0 ,123,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.159e+00, dx = 7.812e-03, dt = 3.372e-03
step = 2, time = 7.470e-03 dt = 3.372e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.467e+02@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.438e+00@ (0 ,127,127), rate = 4.266e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.801e-02@ (0 ,0 ,0 ), rate = 3.906e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.595e-03@ (0 ,127,127), rate = 3.392e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.189e-05@ (0 ,127,127), rate = 3.169e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.678e-06@ (0 ,0 ,0 ), rate = 3.058e+01
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.942e-08@ (0 ,0 ,0 ), rate = 2.995e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.025e-09@ (0 ,127,127), rate = 2.956e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.032e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.425e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.650e-04@ (124,3 ,3 ), rate = 3.893e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.652e-07@ (9 ,10,117), rate = 6.222e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 5.022e-10@ (11,12,115), rate = 5.281e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.974e-13@ (13,114,13), rate = 5.035e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 3.775e-15@ (36,18,106)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,5 ,119), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,7 ,11), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,8 ,114), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.180e-12@ (3 ,9 ,16), rate = 5.284e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,117,18)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.563e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.319e-04@ (2 ,119,5 ), rate = 6.742e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 3.502e-07@ (2 ,11,7 ), rate = 6.620e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 6.237e-10@ (2 ,13,119), rate = 5.616e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.181e-12@ (3 ,16,9 ), rate = 5.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.387e-15@ (3 ,29,10)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBCCProjector::project: |input velo|max = (1.126e+00@(5 ,122,5 ),2.574e-01@(0 ,2 ,59),2.574e-01@(0 ,68,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.371e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.371e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.153e+00@ (0 ,127,127), rate = 3.300e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.126e-01@ (0 ,127,127), rate = 3.690e+01
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.429e-03@ (0 ,127,127), rate = 3.283e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.103e-04@ (0 ,0 ,0 ), rate = 3.108e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.655e-06@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.231e-07@ (0 ,127,127), rate = 2.968e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 4.191e-09@ (0 ,127,127), rate = 2.937e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
advancing species advection/diffusion
getting reaction rates and evolving species
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 8, |resid| = 1.437e-10@ (0 ,127,127), rate = 2.917e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.201e-12@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.418e-02@(0 ,0 ,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
EBLevelCCProjector::project:|gph|max = (6.217e-01@(0 ,0 ,127),2.332e-01@(0 ,127,1 ),2.332e-01@(0 ,126,0 )EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.199e+00, dx = 7.812e-03, dt = 3.259e-03
step = 3, time = 1.084e-02 dt = 3.259e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.382e+02@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.120e+00@ (0 ,0 ,0 ), rate = 4.429e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.755e-02@ (0 ,127,127), rate = 4.023e+01
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.240e-03@ (0 ,0 ,0 ), rate = 3.462e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.965e-05@ (0 ,127,127), rate = 3.216e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.252e-06@ (0 ,0 ,0 ), rate = 3.092e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 7.454e-08@ (0 ,127,127), rate = 3.022e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.503e-09@ (0 ,0 ,0 ), rate = 2.978e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.501e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.529e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.424e-04@ (124,124,4 ), rate = 2.479e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.585e-07@ (10,11,11), rate = 8.980e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.723e-10@ (12,13,13), rate = 5.821e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.916e-13@ (14,15,15), rate = 5.540e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.887e-15@ (107,98,77)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,5 ,7 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,120,10), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,8 ,114), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,118,112), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.207e-15@ (3 ,9 ,108)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.273e-01@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.592e-04@ (2 ,7 ,5 ), rate = 7.997e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 2.207e-07@ (2 ,10,120), rate = 7.212e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.583e-10@ (2 ,13,119), rate = 6.161e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.165e-13@ (2 ,15,9 ), rate = 5.812e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.221e-15@ (2 ,40,118)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
EBCCProjector::project: |input velo|max = (1.163e+00@(5 ,122,5 ),3.344e-01@(0 ,2 ,5 ),3.344e-01@(0 ,5 ,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBCCProjector::project: |kappa DiVU|max  = 1.485e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.485e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.086e+00@ (0 ,127,127), rate = 3.633e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.065e-01@ (0 ,127,127), rate = 3.838e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 3.164e-03@ (0 ,0 ,0 ), rate = 3.365e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.001e-04@ (0 ,0 ,0 ), rate = 3.162e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.273e-06@ (0 ,127,127), rate = 3.058e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
advancing species advection/diffusion
getting reaction rates and evolving species
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.092e-07@ (0 ,0 ,0 ), rate = 2.999e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.685e-09@ (0 ,127,127), rate = 2.962e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.254e-10@ (0 ,0 ,0 )
calling heat solver for variable 0
EBCCProjector::project: |phi|max  = 2.087e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
EBLevelCCProjector::project:|gph|max = (6.547e-01@(0 ,0 ,127),2.526e-01@(0 ,127,0 ),2.526e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.224e+00, dx = 7.812e-03, dt = 3.193e-03
step = 4, time = 1.410e-02 dt = 3.193e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.322e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.944e+00@ (0 ,127,127), rate = 4.491e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.198e-02@ (0 ,0 ,0 ), rate = 4.090e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.055e-03@ (0 ,127,127), rate = 3.502e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.334e-05@ (0 ,0 ,0 ), rate = 3.245e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.034e-06@ (0 ,0 ,0 ), rate = 3.114e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.694e-08@ (0 ,127,127), rate = 3.039e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.237e-09@ (0 ,0 ,0 ), rate = 2.992e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.560e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.983e-01@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.257e-04@ (124,123,123), rate = 1.577e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.178e-07@ (123,5 ,122), rate = 1.068e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.817e-10@ (13,113,14), rate = 6.480e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 1
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.104e-13@ (15,111,16), rate = 5.854e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (27,111,38)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,122,120), rate = 7.898e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,7 ,11), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,8 ,114), rate = 6.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.013e-13@ (2 ,118,112), rate = 6.134e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.049e-16@ (3 ,8 ,29)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
EBMultigrid::solve iter = 0, |resid| = 9.361e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.185e-04@ (2 ,120,122), rate = 7.898e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.596e-07@ (2 ,11,7 ), rate = 7.426e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.461e-10@ (2 ,13,119), rate = 6.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 4.012e-13@ (2 ,112,118), rate = 6.135e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 8.327e-16@ (2 ,60,8 )
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
cc projecting vel + gphi*dt
mac projecting advection velocity
EBCCProjector::project: |input velo|max = (1.188e+00@(4 ,5 ,122),3.879e-01@(0 ,2 ,122),3.879e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBCCProjector::project: |kappa DiVU|max  = 1.553e+02@(0 ,0 ,127)
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.553e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 4.016e+00@ (0 ,127,127), rate = 3.867e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.020e-01@ (0 ,127,127), rate = 3.938e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.983e-03@ (0 ,0 ,0 ), rate = 3.419e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 9.330e-05@ (0 ,127,127), rate = 3.197e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 3.026e-06@ (0 ,0 ,0 ), rate = 3.084e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 1.002e-07@ (0 ,127,127), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
advancing species advection/diffusion
getting reaction rates and evolving species
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.364e-09@ (0 ,127,127), rate = 2.979e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.140e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.889e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBLevelCCProjector::project:|gph|max = (6.726e-01@(0 ,0 ,127),2.703e-01@(0 ,127,0 ),2.703e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
calling heat solver for variable 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
maxvel = 1.236e+00, dx = 7.812e-03, dt = 3.161e-03
step = 5, time = 1.729e-02 dt = 3.161e-03
advancing velocity and pressure fields 
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.286e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.854e+00@ (0 ,0 ,0 ), rate = 4.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.911e-02@ (0 ,0 ,0 ), rate = 4.129e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.959e-03@ (0 ,127,127), rate = 3.527e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 6.006e-05@ (0 ,0 ,0 ), rate = 3.263e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.920e-06@ (0 ,127,127), rate = 3.128e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.294e-08@ (0 ,0 ,0 ), rate = 3.051e+01
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.097e-09@ (0 ,0 ,0 ), rate = 3.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.060e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
calling heat solver for variable 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
EBMultigrid::solve iter = 0, |resid| = 1.147e-01@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.157e-04@ (124,123,123), rate = 9.914e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.110e-07@ (123,5 ,122), rate = 1.043e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.427e-10@ (12,113,113), rate = 7.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.380e-13@ (15,16,111), rate = 5.995e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (55,24,27)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,5 ,119), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,120,116), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,119,13), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,9 ,15), rate = 6.284e+02
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,10,16)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.588e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.606e-05@ (2 ,8 ,122), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.297e-07@ (2 ,11,7 ), rate = 7.408e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.960e-10@ (2 ,114,8 ), rate = 6.617e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 3.119e-13@ (2 ,112,118), rate = 6.283e+02
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.939e-16@ (2 ,107,119)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.204e+00@(4 ,122,5 ),4.246e-01@(0 ,2 ,123),4.246e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.600e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.600e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.976e+00@ (0 ,127,127), rate = 4.023e+01
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.934e-02@ (0 ,0 ,0 ), rate = 4.002e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.875e-03@ (0 ,127,127), rate = 3.455e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.925e-05@ (0 ,0 ,0 ), rate = 3.221e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.877e-06@ (0 ,0 ,0 ), rate = 3.102e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.485e-08@ (0 ,127,127), rate = 3.034e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.171e-09@ (0 ,0 ,0 ), rate = 2.991e+01
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.070e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.766e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
EBLevelCCProjector::project:|gph|max = (6.846e-01@(0 ,0 ,127),2.825e-01@(0 ,127,0 ),2.825e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
maxvel = 1.247e+00, dx = 7.812e-03, dt = 3.133e-03
step = 6, time = 2.045e-02 dt = 3.133e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.260e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.793e+00@ (0 ,0 ,0 ), rate = 4.510e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.722e-02@ (0 ,0 ,0 ), rate = 4.154e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.897e-03@ (0 ,0 ,0 ), rate = 3.543e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.793e-05@ (0 ,0 ,0 ), rate = 3.275e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.846e-06@ (0 ,127,127), rate = 3.138e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 6.034e-08@ (0 ,0 ,0 ), rate = 3.059e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.005e-09@ (0 ,127,127), rate = 3.010e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.739e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 6.790e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 1.059e-04@ (124,123,123), rate = 6.410e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.033e-07@ (123,5 ,122), rate = 1.026e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.216e-10@ (123,6 ,121), rate = 8.489e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.907e-13@ (15,110,17), rate = 6.378e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (57,5 ,32)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,121,119), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,7 ,11), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,118,114), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.525e-13@ (2 ,9 ,15), rate = 6.423e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,126,56)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.505e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.174e-05@ (2 ,119,121), rate = 5.511e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 1.092e-07@ (2 ,116,120), rate = 7.484e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.622e-10@ (2 ,13,9 ), rate = 6.735e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.524e-13@ (2 ,112,118), rate = 6.424e+02
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 7.772e-16@ (0 ,112,1 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
EBCCProjector::project: |input velo|max = (1.217e+00@(5 ,6 ,121),4.505e-01@(0 ,2 ,123),4.505e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.625e+02@(0 ,0 ,127)
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.625e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.937e+00@ (0 ,127,127), rate = 4.127e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.733e-02@ (0 ,127,127), rate = 4.045e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.798e-03@ (0 ,0 ,0 ), rate = 3.479e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.639e-05@ (0 ,0 ,0 ), rate = 3.238e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.773e-06@ (0 ,0 ,0 ), rate = 3.115e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 9.110e-08@ (0 ,0 ,0 ), rate = 3.044e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 3.037e-09@ (0 ,127,127), rate = 3.000e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 1.024e-10@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.675e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
EBLevelCCProjector::project:|gph|max = (6.900e-01@(0 ,0 ,127),2.898e-01@(0 ,127,0 ),2.898e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.254e+00, dx = 7.812e-03, dt = 3.114e-03
step = 7, time = 2.359e-02 dt = 3.114e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.242e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.755e+00@ (0 ,0 ,0 ), rate = 4.509e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.606e-02@ (0 ,0 ,0 ), rate = 4.171e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.858e-03@ (0 ,0 ,0 ), rate = 3.555e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.659e-05@ (0 ,127,127), rate = 3.284e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.799e-06@ (0 ,127,127), rate = 3.146e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.866e-08@ (0 ,127,127), rate = 3.066e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.945e-09@ (0 ,0 ,0 ), rate = 3.016e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.527e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 5.124e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.771e-05@ (124,4 ,4 ), rate = 5.244e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.707e-08@ (123,122,5 ), rate = 1.007e+03
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.154e-10@ (123,6 ,121), rate = 8.413e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.630e-13@ (16,17,17), rate = 7.080e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (48,39,87)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,6 ,8 ), rate = 4.259e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,8 ,116), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,9 ,13), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,10,112), rate = 6.512e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,124,15)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.056e-02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 7.174e-05@ (2 ,119,121), rate = 4.259e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.598e-08@ (2 ,11,119), rate = 7.475e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.412e-10@ (2 ,13,9 ), rate = 6.795e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 2.169e-13@ (2 ,112,10), rate = 6.513e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.661e-16@ (1 ,97,4 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.228e+00@(5 ,6 ,121),4.691e-01@(0 ,2 ,123),4.691e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.641e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.641e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.911e+00@ (0 ,127,127), rate = 4.196e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.602e-02@ (0 ,127,127), rate = 4.073e+01
mac projecting advection velocity
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
calling heat solver for variable 0
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.747e-03@ (0 ,0 ,0 ), rate = 3.496e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.450e-05@ (0 ,127,127), rate = 3.251e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.704e-06@ (0 ,127,127), rate = 3.125e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.858e-08@ (0 ,0 ,0 ), rate = 3.053e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.945e-09@ (0 ,0 ,0 ), rate = 3.008e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.882e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.607e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.932e-01@(0 ,127,0 ),2.946e-01@(0 ,127,0 ),2.946e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.257e+00, dx = 7.812e-03, dt = 3.107e-03
step = 8, time = 2.670e-02 dt = 3.107e-03
advancing velocity and pressure fields 
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
calling heat solver for variable 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.233e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.736e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.541e-02@ (0 ,0 ,0 ), rate = 4.183e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.836e-03@ (0 ,0 ,0 ), rate = 3.563e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.577e-05@ (0 ,127,127), rate = 3.291e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.769e-06@ (0 ,0 ,0 ), rate = 3.152e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.760e-08@ (0 ,0 ,0 ), rate = 3.072e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.907e-09@ (0 ,127,127), rate = 3.021e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.385e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 4.385e-02@ (10,125,125)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 9.115e-05@ (124,123,123), rate = 4.810e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.321e-08@ (124,121,5 ), rate = 9.779e+02
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.122e-10@ (123,121,6 ), rate = 8.308e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.479e-13@ (16,109,109), rate = 7.587e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.220e-15@ (50,36,72)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,123,121)
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,7 ,9 ), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,119,11), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,118,114), rate = 6.801e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.971e-13@ (2 ,10,112), rate = 6.530e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,1 ,46)
calling heat solver for variable 2
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve iter = 0, |resid| = 2.555e-02@ (0 ,6 ,123)
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
advancing species advection/diffusion
getting reaction rates and evolving species
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
calling heat solver for variable 0
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
advancing passive scalar
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
mac projecting advection velocity
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
mac projecting advection velocity
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 6.481e-05@ (2 ,118,120), rate = 3.943e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.753e-08@ (2 ,116,8 ), rate = 7.405e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.287e-10@ (2 ,13,9 ), rate = 6.801e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
calling heat solver for variable 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
calling heat solver for variable 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.970e-13@ (2 ,15,117), rate = 6.531e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,35,4 )
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.235e+00@(5 ,6 ,121),4.829e-01@(0 ,2 ,123),4.829e-01@(0 ,123,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
EBCCProjector::project: |kappa DiVU|max  = 1.654e+02@(0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.654e+02@ (0 ,0 ,127)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.900e+00@ (0 ,127,127), rate = 4.242e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.530e-02@ (0 ,0 ,0 ), rate = 4.093e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.717e-03@ (0 ,127,127), rate = 3.508e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.333e-05@ (0 ,0 ,0 ), rate = 3.260e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.660e-06@ (0 ,127,127), rate = 3.132e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.695e-08@ (0 ,127,127), rate = 3.060e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.885e-09@ (0 ,0 ,0 ), rate = 3.014e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.689e-11@ (0 ,127,127)
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBCCProjector::project: |phi|max  = 1.558e-02@(0 ,0 ,127)
Using the ***average of MAC gradients*** for the CC gradient.
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
EBLevelCCProjector::project:|gph|max = (6.961e-01@(0 ,0 ,127),2.982e-01@(0 ,127,0 ),2.982e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.263e+00, dx = 7.812e-03, dt = 3.092e-03
step = 9, time = 2.981e-02 dt = 3.092e-03
advancing velocity and pressure fields 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
mac projecting advection velocity
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.223e+02@ (0 ,0 ,127)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 2.713e+00@ (0 ,0 ,0 ), rate = 4.507e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 6.471e-02@ (0 ,0 ,0 ), rate = 4.192e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.813e-03@ (0 ,127,127), rate = 3.570e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 5.498e-05@ (0 ,127,127), rate = 3.297e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 1.741e-06@ (0 ,127,127), rate = 3.157e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
advancing species advection/diffusion
getting reaction rates and evolving species
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 5.661e-08@ (0 ,0 ,0 ), rate = 3.076e+01
printing time table 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 1.871e-09@ (0 ,127,127), rate = 3.025e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.261e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
calling heat solver for variable 0
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 3.900e-02@ (15,124,124)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
printing time table 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 8.410e-05@ (124,4 ,4 ), rate = 4.637e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
printing time table 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 8.794e-08@ (124,5 ,121), rate = 9.563e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.057e-10@ (123,6 ,121), rate = 8.324e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.359e-13@ (98,7 ,7 ), rate = 7.775e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
printing time table 
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 2.442e-15@ (54,69,23)
calling heat solver for variable 1
advancing species advection/diffusion
getting reaction rates and evolving species
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,122,6 )
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
printing time table 
printing time table 
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
printing time table 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,7 ,9 ), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,119,11), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,118,114), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.741e-13@ (2 ,10,112), rate = 6.605e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 5.551e-16@ (0 ,2 ,27)
calling heat solver for variable 2
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 2.223e-02@ (0 ,6 ,122)
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 5.872e-05@ (2 ,118,120), rate = 3.785e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 7.889e-08@ (2 ,11,119), rate = 7.443e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 1.150e-10@ (2 ,13,9 ), rate = 6.858e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 1.743e-13@ (2 ,15,117), rate = 6.598e+02
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 6.106e-16@ (1 ,81,122)
cc projecting vel + gphi*dt
EBCCProjector::project: |input velo|max = (1.240e+00@(6 ,7 ,120),4.941e-01@(0 ,2 ,122),4.941e-01@(0 ,122,2 )EBCCProjector::project: |input velo|max)
EBCCProjector::project: |kappa DiVU|max  = 1.657e+02@(0 ,127,0 )
EBMultigrid::solve tol = 1.000e-12,  max iter = 27
EBMultigrid::solve iter = 0, |resid| = 1.657e+02@ (0 ,127,0 )
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 1, |resid| = 3.879e+00@ (0 ,127,127), rate = 4.273e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 2, |resid| = 9.446e-02@ (0 ,127,127), rate = 4.107e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 3, |resid| = 2.686e-03@ (0 ,0 ,0 ), rate = 3.517e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 4, |resid| = 8.221e-05@ (0 ,0 ,0 ), rate = 3.267e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 5, |resid| = 2.619e-06@ (0 ,127,127), rate = 3.138e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 6, |resid| = 8.546e-08@ (0 ,127,127), rate = 3.065e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid::solve iter = 7, |resid| = 2.831e-09@ (0 ,0 ,0 ), rate = 3.019e+01
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
copyTo BoxPattern constructor: m_localPattern.size() = 8
copyTo BoxPattern constructor: proc = 0 m_recvPattern[iproc].size() = 0 m_sendPattern[iproc].size() = 0
[(0 ,0 ,0 ),(3 ,3 ,3 )][0] # 
[(0 ,0 ,0 ),(1 ,1 ,1 )][0] # [(0 ,0 ,2 ),(1 ,1 ,3 )][0] # [(0 ,2 ,0 ),(1 ,3 ,1 )][0] # [(0 ,2 ,2 ),(1 ,3 ,3 )][0]
[(2 ,0 ,0 ),(3 ,1 ,1 )][0] # [(2 ,0 ,2 ),(3 ,1 ,3 )][0] # [(2 ,2 ,0 ),(3 ,3 ,1 )][0] # [(2 ,2 ,2 ),(3 ,3 ,3 )][0]

EBMultigrid:solve: final     |resid| = 9.481e-11@ (0 ,0 ,0 )
EBCCProjector::project: |phi|max  = 1.512e-02@(0 ,127,0 )
Using the ***average of MAC gradients*** for the CC gradient.
EBLevelCCProjector::project:|gph|max = (6.957e-01@(0 ,127,0 ),2.996e-01@(0 ,127,0 ),2.996e-01@(0 ,0 ,127)EBLevelCCProjector::project:|gph|max)
advancing passive scalar
advancing species advection/diffusion
getting reaction rates and evolving species
maxvel = 1.267e+00, dx = 7.812e-03, dt = 3.083e-03
finished run
printing time table 
