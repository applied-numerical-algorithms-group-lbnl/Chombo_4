#!/usr/bin/python
from argparse import *
import os
import glob
import platform

parser = ArgumentParser()

parser.add_argument('--dim', type=int, help='dimensionality to build executables [2]',default='2')
parser.add_argument('--opt',  choices=['DEBUG', 'TRUE', 'HIGH'],help='compiler optimization [DEBUG]',default='DEBUG')
parser.add_argument('--mpi',  choices=['TRUE', 'FALSE'],help='MPI  on or off [FALSE]',default='FALSE')
parser.add_argument('--hdf5',  choices=['TRUE', 'FALSE'],help='HDF5  on or off [TRUE]',default='TRUE')
parser.add_argument('--efence',  choices=['TRUE', 'FALSE'],help='electric fence on or off[FALSE]',default='FALSE')
parser.add_argument('--prec',  choices=['SINGLE', 'DOUBLE'],help='precision [DOUBLE]',default='DOUBLE')
parser.add_argument('--cuda', choices=['TRUE', 'FALSE'],help='CUDA on or off [FALSE]',default='FALSE')
parser.add_argument('--hip', choices=['TRUE', 'FALSE'],help='HIP on or off [FALSE]',default='FALSE')
parser.add_argument('--petsc', choices=['TRUE', 'FALSE'],help='PETSc on or off [FALSE]',default='FALSE')

args = parser.parse_args()

print args

f_pref = open('Makefile.prefix','r')
f_post = open('Makefile.postfix','r')

makefile_pref = f_pref.read()
makefile_post = f_post.read()
f_pref.close()
f_post.close()

targets=['DomainDecomposition/Euler/exec','DomainDecomposition/Euler/exchangeTest',  'DomainDecomposition/EBApply/exec','DomainDecomposition/EBApply/noebsten','DomainDecomposition/EBApply/ebforall','DomainDecomposition/EBApply/exchange','DomainDecomposition/EBApply/serialization', 'DomainDecomposition/EBHelmholtz/exec','DomainDecomposition/EBHelmholtz/truncation','DomainDecomposition/EBHelmholtz/applyOnly', 'DomainDecomposition/EBHelmholtz/macProjExec','DomainDecomposition/EBHelmholtz/ccProjExec','DomainDecomposition/EBHeat/exec', 'DomainDecomposition/EBAdvection/exec','DomainDecomposition/EBSmallTest/exec', 'DomainDecomposition/EBPETSc/exec', 'DomainDecomposition/EBINS/exec']

top = os.getcwd()
chombo_home = top + '/..'
os.chdir(chombo_home+'/mk')
f_mach_dep = open('Make.defs.local','r')
mach_dep = f_mach_dep.read()
f_mach_dep.close()
os.chdir(top)
r = open('compile.example','w')
r.write('#/usr/bin/csh\n')

for t in targets:
    d= t
    print d
    comstr = " cd " + d + "; make pristine; make; cd " + top 
    echostr =  "\necho \" " + comstr + "\" \n"
    runstr =  "\n" + comstr + "\n"
    r.write(echostr)
    r.write(runstr)
    os.chdir(d)
    f = open('GNUmakefile','w')
    f.write('\nCHOMBO_HOME := ' + chombo_home)
    f.write('\nDIM := ' + str(args.dim)+"\n")
    f.write(makefile_pref);

    f.write('\nCPPFLAGS = -std=c++11\n')
    f.write(mach_dep);

    if args.mpi == 'TRUE':
        f.write('\nCPPFLAGS += -DCH_MPI -DMPICH_SKIP_MPICXX -ULAM_WANT_MPI2CPP -DMPI_NO_CPPBIND')
        f.write('\nLIBS     += $(MPILIBS)')

    if(args.hdf5 == 'TRUE'):
        f.write('\nCPPFLAGS += -DCH_USE_HDF5 \n')
        f.write('\nCPPFLAGS += $(HDFINCFLAGS)\n')
        f.write('\nLIBS     += $(HDFLIBFLAGS)\n ')

    if(args.petsc == 'TRUE'):
        f.write('\nCPPFLAGS += -DCH_USE_PETSC')
        f.write('\nCPPFLAGS += $(PETSC_CC_INCLUDES)')
        f.write('\nLIBS     += $(PETSC_KSP_LIB)\n')

    if(args.efence == 'TRUE'):
        f.write('\nLIBS     += $(EFENCEFLAGS) \n')


    if(args.prec == 'DOUBLE'):
        f.write('\nCXXFLAGS += -DCH_USE_DOUBLE\n')

    if args.opt == 'DEBUG':
        if args.hip == 'FALSE':
	  f.write('\nCXXDBGFLAGS:= -g $(CXXALLFLAGS)\n')
	if args.cuda == 'TRUE':
            f.write("\nCXXGPUFLAGS:= -G -DTHRUST_DEBUG -Xcompiler '$(CXXDBGFLAGS)'\n")
            f.write('\nCXXFLAGS+=$(CXXGPUFLAGS) \n')
        else:
            if args.hip == 'TRUE':
              f.write("\nCXXGPUFLAGS:= -G -DTHRUST_DEBUG -Xcompiler '$(CXXDBGFLAGS)'\n")
              f.write('\nCXXFLAGS+=$(CXXGPUFLAGS) \n')
	    else:
              f.write('\nCXXFLAGS+=$(CXXDBGFLAGS) \n')
    else:
        if args.opt == 'HIGH':
	    if args.hip == 'FALSE':
               f.write('\nCXXOPTFLAGS:= -O3 $(CXXALLFLAGS) -DNDEBUG\n')
        else:
            f.write('\nCXXOPTFLAGS:= -O3 $(CXXALLFLAGS)\n')
        if args.cuda == 'TRUE':
            f.write("\nCXXGPUFLAGS:= -Xcompiler '$(CXXOPTFLAGS)'\n")
            f.write('\nCXXFLAGS+=$(CXXGPUFLAGS) \n')
        else:
            f.write('\nCXXFLAGS+=$(CXXOPTFLAGS) \n')
        if args.hip == 'TRUE':
            f.write("\nCXXGPUFLAGS:= -Xcompiler '$(CXXOPTFLAGS)'\n")
            f.write('\nCXXFLAGS+=$(CXXGPUFLAGS) \n')
        else:
            f.write('\nCXXFLAGS+=$(CXXOPTFLAGS) \n')

    if args.cuda == 'TRUE':
        f.write('\nCXX = nvcc \n DEP=nvcc\n')
        f.write('\nLIBS+= -lnvToolsExt -lgomp\n')
        f.write('\nCXXFLAGS+=-DPROTO_CUDA=1 -x cu --expt-extended-lambda -arch=compute_70\n')
   
    if args.hip == 'TRUE':
        f.write('\nCXX = hipcc \n DEP=hipcc\n')
        f.write('\nCXXFLAGS+=-DPROTO_CUDA=1 -DPROTO_HIP\n')
    

    f.write(makefile_post)
 
    os.chdir(top)
    f.close()
    

r.close()
os.system('chmod +x compile.example')
