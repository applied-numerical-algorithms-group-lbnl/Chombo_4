#!/usr/bin/python
from argparse import *
import os
import glob
import platform

parser = ArgumentParser()

parser.add_argument('--dim', type=int, help='dimensionality to build executables [2]',default='2')
parser.add_argument('--opt',  choices=['DEBUG', 'TRUE', 'HIGH'],help='compiler optimization [DEBUG]',default='DEBUG')
parser.add_argument('--mpi',  choices=['TRUE', 'FALSE'],help='MPI  on or off [FALSE]',default='FALSE')
parser.add_argument('--hdf5',  choices=['TRUE', 'FALSE'],help='HDF5  on or off [TRUE]',default='FALSE')
parser.add_argument('--efence',  choices=['TRUE', 'FALSE'],help='electric fence on or off[FALSE]',default='FALSE')
parser.add_argument('--prec',  choices=['SINGLE', 'DOUBLE'],help='precision [DOUBLE]',default='DOUBLE')
parser.add_argument('--cuda', choices=['TRUE', 'FALSE'],help='CUDA on or off [FALSE]',default='FALSE')
parser.add_argument('--petsc', choices=['TRUE', 'FALSE'],help='PETSc on or off [FALSE]',default='FALSE')

args = parser.parse_args()

print args

f_pref = open('../mk/Makefile.prefix','r')
f_ebpre = open('../mk/Makefile.ebprefix','r')
f_post = open('../mk/Makefile.postfix','r')
f_ebpost = open('../mk/Makefile.ebpost','r')
makefile_pref = f_pref.read()
makefile_post = f_post.read()
makefile_ebpre = f_ebpre.read()
makefile_ebpost = f_ebpost.read()
f_pref.close()
f_post.close()

targets=['DomainDecomposition/Euler/exec',  'DomainDecomposition/EBApply/exec', 'DomainDecomposition/EBHelmholtz/exec', 'DomainDecomposition/EBHelmholtz/macProjExec','DomainDecomposition/EBHelmholtz/ccProjExec','DomainDecomposition/EBHeat/exec', 'DomainDecomposition/MHD/exec', 'DomainDecomposition/EBAdvection/exec', 'DomainDecomposition/EBPETSc/exec', 'DomainDecomposition/EBINS/exec']

top = os.getcwd()
chombo_home = top + '/..'
os.chdir(chombo_home+'/mk')
f_mach_dep = open('Make.defs.local','r')
mach_dep = f_mach_dep.read()
f_mach_dep.close()
os.chdir(top)

for t in targets:
    d= t
    print d
    os.chdir(d)
    f = open('GNUmakefile','w')
    f.write('\nCHOMBO_HOME := ' + chombo_home)
    f.write('\nDIM := ' + str(args.dim)+"\n")
    f.write(makefile_pref);
    if("EB" in t):
        f.write(makefile_ebpre);



    f.write('\nCPPFLAGS = -std=c++14\n')
    f.write(mach_dep);

    if args.mpi == 'TRUE':
        f.write('\nCPPFLAGS += -DCH_MPI -DMPICH_SKIP_MPICXX -ULAM_WANT_MPI2CPP -DMPI_NO_CPPBIND')

    if(args.hdf5 == 'TRUE'):
        f.write('\nCPPFLAGS += -DCH_USE_HDF5 \n')
        f.write('\nCPPFLAGS += $(HDFINCFLAGS)\n')
        f.write('\nLIBS     += $(HDFLIBFLAGS)\n ')

    if(args.petsc == 'TRUE'):
        f.write('\n\ninclude $(PETSC_DIR)/lib/petsc/conf/variables\n')
        f.write('\nCPPFLAGS += -DCH_USE_PETSC')
        f.write('\nCPPFLAGS += $(PETSC_CC_INCLUDES)')
        f.write('\nLIBS     += $(PETSC_KSP_LIB)\n')

    if(args.efence == 'TRUE'):
        f.write('\nLIBS     += $(EFENCEFLAGS) \n')


    if(args.prec == 'DOUBLE'):
        f.write('\nCXXFLAGS += -DCH_USE_DOUBLE\n')

    if args.opt == 'DEBUG':
        f.write('\nCXXFLAGS+=$(CXXDBGFLAGS) \n')
    else: # TRUE or HIGH case
        f.write('\nCXXFLAGS+=$(CXXOPTFLAGS) \n')
   

    if args.opt == 'HIGH':
        f.write('\nCXXFLAGS+=-DNDEBUG \n')

    if args.cuda == 'TRUE':
#        f.write('\nCXX = nvcc -ccbin mpicxx \n DEP=nvcc\n')
#	f.write('\nCXX = mpicxx -cxx=nvcc \n DEP=nvcc\n')
	f.write('\nCXX = nvcc  \n DEP=nvcc\n')
        f.write('\nLIBS+= -lnvToolsExt\n')
        f.write('\nCXXFLAGS+= -DPROTO_CUDA=1 -x cu --expt-extended-lambda -arch=compute_70\n')
        if args.opt == 'DEBUG':
            f.write('\nCXXFLAGS+=-G -DTHRUST_DEBUG\n')

    if("EB" in t):
        f.write(makefile_ebpost);

    f.write(makefile_post);
 
    os.chdir(top)
    f.close()

